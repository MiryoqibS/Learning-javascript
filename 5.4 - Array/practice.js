/*
== Задание 1 с сайта ==
Что выведет следующий код?

let fruits = ["Яблоки", "Груша", "Апельсин"];

// добавляем новое значение в "копию"
let shoppingCart = fruits;
shoppingCart.push("Банан");

// что в fruits?
alert( fruits.length ); // ?
*/

let fruits = ["Яблоки", "Груша", "Апельсин"];

// добавляем новое значение в "копию"
let shoppingCart = fruits;
shoppingCart.push("Банан");

// что в fruits?
console.log(fruits.length); // 4 потому-что они ссылаются на 1 объект-массив

/*
== Задание 2 с сайта ==
Операции с массивами
Давайте произведём 5 операций с массивом.

Создайте массив styles с элементами «Джаз» и «Блюз».
Добавьте «Рок-н-ролл» в конец.
Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
Удалите первый элемент массива и покажите его.
Вставьте Рэп и Регги в начало массива.
Массив по ходу выполнения операций:

Джаз, Блюз
Джаз, Блюз, Рок-н-ролл
Джаз, Классика, Рок-н-ролл
Классика, Рок-н-ролл
Рэп, Регги, Классика, Рок-н-ролл
*/

let styles = ["Джаз", "Блюз"];
styles.push("Рок-н-ролл");
styles[Math.floor(styles.length / 2)] = "Классика";
styles.shift();
styles.unshift("Рэп", "Регги");


/*
== Задание 3 с сайта ==
Вызов в контексте массива
Каков результат? Почему?

let arr = ["a", "b"];

arr.push(function() {
    alert( this );
});

arr[2](); // ?
*/

let arr = ["a", "b"];

arr.push(function () {
    console.log(this);

});

arr[2](); // Анонимная функция которая выводить весь массив

/*
== Задание 4 с сайта ==
Сумма введённых чисел
Напишите функцию sumInput(), которая:

Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
Подсчитывает и возвращает сумму элементов массива.
P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».
*/

const sumInput = () => {
    let userNumber;
    let numberArray = [];

    do {
        userNumber = prompt();
        if (!userNumber) {
            break;
        };
        if (!isNaN(+userNumber)) {
            numberArray.push(+userNumber);
        };
    } while (typeof +userNumber == "number" && !isNaN(+userNumber));

    // В учебника мы этого ещё не проходили! Но я смотрю так-же видео курсы с ютуба 
    // return numberArray.reduce((accumulator, result)=>{
    //     return result += accumulator;
    // });

    // 2 Вариант 
    let result = 0;

    for (const number of numberArray) {
        result += number;
    };

    return result;
};

sumInput();

/*
== Задание 5 с сайта ==
Подмассив наибольшей суммы
На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.

Функция getMaxSubSum(arr) должна возвращать эту сумму.

Например:

getMaxSubSum([-1, 2, 3, -9]) == 5 (сумма выделенных элементов)
getMaxSubSum([2, -1, 2, 3, -9]) == 6
getMaxSubSum([-1, 2, 3, -9, 11]) == 11
getMaxSubSum([-2, -1, 1, 2]) == 3
getMaxSubSum([100, -9, 2, -3, 5]) == 100
getMaxSubSum([1, 2, 3]) == 6 (берём все)
Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

getMaxSubSum([-1, -2, -3]) = 0
Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций.
*/

const getMaxSubSum = (arr) => {
    let maxSum = 0;

    for (let i = 0; i < arr.length; i++) {
        let sum = 0;
        for (let j = i; j < arr.length; j++) {
            sum += arr[j];

            if (sum > maxSum) {
                maxSum = sum;
            };
        };
    };

    return maxSum;
};

getMaxSubSum([1, -2, 3, 4, -9, 6]);
getMaxSubSum([-1, 2, 3, -9]);
getMaxSubSum([100, -9, 2, -3, 5])