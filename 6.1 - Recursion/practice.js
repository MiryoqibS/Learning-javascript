/*
== Задание 1 с сайта == 
Вычислить сумму чисел до данного
Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

Например:
sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
Сделайте три варианта решения:

С использованием цикла.
Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) for n > 1.
С использованием формулы арифметической прогрессии.
Пример работы вашей функции:

function sumTo(n) { ... ваш код ...  }

alert( sumTo(100) ); // 5050
P.S. Какой вариант решения самый быстрый? Самый медленный? Почему?
P.P.S. Можно ли при помощи рекурсии посчитать sumTo(100000)?
*/

// С помощью цикла -середина между быстрым и медленным хороший но не для больших чисел
// const sumTo= (n) => {
//     let res = 0;

//     for (let i = 0; i <= n; i++) {
//         res += i;
//     };

//     return res;
// };

// С помощью рекурсии -самый медленный но и в тоже время самый элегантный способ и
// нельзя сделать n 100000 потому что есть ограничения при компиляции для оптимизации 
// const sumTo = (n) => {
//     return n == 1 ? n : (n + sumTo(n - 1));
// };

// С помощью формулы -самый быстрый вариант так как мы делаем только расчёты и тут всего 1 контекст выполнения
const sumTo = (n) => {
    return n * (n + 1) / 2;
};

console.log(sumTo(1));
console.log(sumTo(2));
console.log(sumTo(3));
console.log(sumTo(4));

/*
== Задание 2 с сайта ==
Вычислить факториал
Факториал натурального числа – это число, умноженное на "себя минус один", затем на "себя минус два", и так далее до 1. Факториал n обозначается как n!

Определение факториала можно записать как:

n! = n * (n - 1) * (n - 2) * ...*1
Примеры значений для разных n:

1! = 1
2! = 2 * 1 = 2
3! = 3 * 2 * 1 = 6
4! = 4 * 3 * 2 * 1 = 24
5! = 5 * 4 * 3 * 2 * 1 = 120
Задача – написать функцию factorial(n), которая возвращает n!, используя рекурсию.

alert( factorial(5) ); // 120
P.S. Подсказка: n! можно записать как n * (n-1)! Например: 3! = 3*2! = 3*2*1! = 6
*/

const factorial = (n) => {
    return n == 1 ? n : (n * factorial(n - 1));
};

console.log(factorial(1));
console.log(factorial(2));
console.log(factorial(3));
console.log(factorial(4));
console.log(factorial(5));

/*
== Задание 3 с сайта ==
Числа Фибоначчи
Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То есть, следующее число получается как сумма двух предыдущих.

Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.

Пример работы:
function fib(n) { ваш код }

alert(fib(3)); // 2
alert(fib(7)); // 13
alert(fib(77)); // 5527939700884757
P.S. Все запуски функций из примера выше должны работать быстро. Вызов fib(77) должен занимать не более доли секунды.
*/

// С помощью цикла выполниться за менее секунды
const fib = (n) => {
    let current = 1;
    let prev = 1;

    for (let i = 0; i < n - 2; i++) {
        let tmp = current
        current += prev;
        prev = tmp;
    }

    return current;
};

// С помощью рекурсии но если если числа большие например 77 или 25 то занимает много времени

// const fib = (n) => {
//     return [1, 2].includes(n) ? 1 : (fib(n - 1) + fib(n - 2));
// };

console.log(fib(3));
console.log(fib(7));
console.log(fib(77));

/*
== Задание 4 с сайта ==
Вывод односвязного списка
Допустим, у нас есть односвязный список (как описано в главе Рекурсия и стек):

let list = {
    value: 1,
    next: {
        value: 2,
        next: {
        value: 3,
        next: {
            value: 4,
            next: null
        }
        }
    }
};
Напишите функцию printList(list), которая выводит элементы списка по одному.

Сделайте два варианта решения: используя цикл и через рекурсию.

Как лучше: с рекурсией или без?
*/

const list = {
    value: 1,
    next: {
        value: 2,
        next: {
            value: 3,
            next: {
                value: 4,
                next: null
            }
        }
    }
};
// Решение циклом тоже читаемое и быстрее так что лучше использовать цикл
const printList = (list) => {
    while (list !== null) {
        console.log(list.value);
        list = list.next;
    };
};

// Решение с рекурсией элегантный но медленный чем цикл
const printListRecursion = (list) => {
    console.log(list.value);
    return list == null ? list : printList(list.next); 
}

printListRecursion(list)

/*
== Задание 5 с сайта ==
Вывод односвязного списка в обратном порядке
Выведите односвязный список из предыдущего задания Вывод односвязного списка в обратном порядке.

Сделайте два решения: с использованием цикла и через рекурсию.
*/

// Решение циклом тоже можно сделать но читаемость хуже
const printListRevert = (list) => {
    let values = [];
    while (list !== null) {
        values.push(list.value);
        list = list.next;    
    };

    for (let i = values.length - 1; i >= 0; i--) {
        console.log(values[i]);
    };
};

// Решение с рекурсией идеально подходить для этой задачи
const printListRevertRecursion = (list) => {
    if (list.next) {
        printListRevertRecursion(list.next)
    };

    console.log(list.value);
};

printListRevert(list);
printListRevertRecursion(list);