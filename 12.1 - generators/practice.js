// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const checkGenerator = (generator) => {
    while (true) {
        const next = generator.next();

        if (next.value) {
            console.log(next.value);
        } else {
            break;
        };
    };
}

/* 
== –ó–∞–¥–∞—á–∞ 1 —Å —Å–∞–π—Ç–∞ ==
–ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
–ï—Å—Ç—å –º–Ω–æ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π, –≥–¥–µ –Ω–∞–º –Ω—É–∂–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–û–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–º –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ–∫—Å—Ç, —á–∏—Å–ª–∞ –∏ —Ç.–¥., —á—Ç–æ–±—ã —Ö–æ—Ä–æ—à–æ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.

–í JavaScript –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Math.random(). –ù–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ –∂–µ —Å–∞–º—ã–µ –¥–∞–Ω–Ω—ã–µ.

–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ ¬´—Å–µ—è–Ω—ã–µ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã¬ª. –û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç ¬´–∑–µ—Ä–Ω–æ¬ª, –∫–∞–∫ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏ –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–ª–µ–¥—É—é—â–µ–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É. –¢–∞–∫ —á—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∑–µ—Ä–Ω–æ –¥–∞—ë—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –≤–µ—Å—å –ø–æ—Ç–æ–∫ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º. –ù–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –∑–µ—Ä–Ω–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

–ü—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª—ã, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ-–º–µ–Ω–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:

next = previous * 16807 % 2147483647
–ï—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –∫–∞–∫ –∑–µ—Ä–Ω–æ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç:

16807
282475249
1622650073
‚Ä¶–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ‚Ä¶
–ó–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä pseudoRandom(seed), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç seed –∏ —Å–æ–∑–¥–∞—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π.

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

let generator = pseudoRandom(1);

console.log(generator.next().value); // 16807
console.log(generator.next().value); // 282475249
console.log(generator.next().value); // 1622650073
*/

const pseudoRandom = function* (seed) {
    let number = seed;

    while (true) {
        const next = number * 16807 % 2147483647;
        number = next;      
        yield next;
    }
};

let generator = pseudoRandom(1);

console.log(generator.next().value); // 16807
console.log(generator.next().value); // 282475249
console.log(generator.next().value); // 1622650073

/*
== –ó–∞–¥–∞—á–∞ 1 –æ—Ç chatGPT ==
–°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä function* counter(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —á–∏—Å–ª–æ –Ω–∞ 1, –Ω–∞—á–∏–Ω–∞—è —Å 1.
–ü—Ä–∏–º–µ—Ä: gen.next().value ‚Üí 1, 2, 3, ...
*/
console.log("");
console.log("–ó–∞–¥–∞—á–∞ 1");

const counter = function* () {
    let count = 1;

    while (true) {
        yield count;
        count++
    };
};

const gen = counter();

for (let i = 0; i < 10; i++) {

    console.log(gen.next().value);
};

/*
== –ó–∞–¥–∞—á–∞ 2 –æ—Ç chatGPT ==
–ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.

const gen = arrayGenerator(['üî•', '‚ö°', 'üåä']);
gen.next().value // "üî•"
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 2");

const arrayGenerator = function* (array) {
    for (const elem of array) {
        yield elem;
    };
};

const gen2 = arrayGenerator(['üî•', '‚ö°', 'üåä']);

console.log(gen2.next().value);
console.log(gen2.next().value);
console.log(gen2.next().value);

/*

== –ó–∞–¥–∞—á–∞ 3 –æ—Ç chatGPT ==
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä fibonacci(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏.
–ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0, 1, 1, 2, 3, 5, 8, ...
*/

const fibonacci = function* () {
    let number1 = 0;
    let number2 = 1;

    while (true) {
        let fibonacciNumber = number1 + number2;
        yield fibonacciNumber;
        let tmp = number1
        number1 = fibonacciNumber;
        number2 = tmp;
    };
};

const genFibonacci = fibonacci();

for (let i = 0; i < 10; i++) {
    console.log(genFibonacci.next().value);
};

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 3");

/*
== –ó–∞–¥–∞—á–∞ 4 –æ—Ç chatGPT ===
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä range(from, to), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç from –¥–æ to –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
range(5, 8) ‚Üí 5, 6, 7, 8
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 4");

const range = function* (from, to) {
    for (let i = from; i <= to; i++) {
        yield i;
    };
};

const genRange = range(5, 8);
checkGenerator(genRange);


/*
== –ó–∞–¥–∞—á–∞ 5 –æ—Ç chatGPT ==
–°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "JavaScript".
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 5");

const str = function* () {
    const string = "JavaScript";

    for (const char of string) {
        yield char;
    };
};

const genStr = str();
checkGenerator(genStr);

/*
== –ó–∞–¥–∞—á–∞ 6 –æ—Ç chatGPT ==
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä squareNumbers(n), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n.
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 6");

const squareNumbers = function* (n) {
    for (let i = 1; i <= n; i++) {
        yield i ** 2;
    };
};

const genSquareNumber = squareNumbers(10);
checkGenerator(genSquareNumber);

/*
== –ó–∞–¥–∞—á–∞ 7 –æ—Ç chatGPT ==
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-—Å—á—ë—Ç—á–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ yield.

const gen = counterWithReset();
gen.next().value // 1
gen.next(true).value // —Å–±—Ä–æ—Å –¥–æ 1
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 7");

const counterWithReset = function* () {
    let counter = 1;

    while (true) {
        const reset = yield counter;

        if (reset) {
            counter = 1;
            yield counter;
        } else {
            counter++;
        };
    };
};

const genCounterWithReset = counterWithReset();
console.log(genCounterWithReset.next().value) // 1
console.log(genCounterWithReset.next().value) // 2
console.log(genCounterWithReset.next().value) // 3
console.log(genCounterWithReset.next(true).value) // —Å–±—Ä–æ—Å –¥–æ 1
console.log(genCounterWithReset.next().value) // 1
console.log(genCounterWithReset.next().value) // 2

/*
== –ó–∞–¥–∞—á–∞ 8 –æ—Ç chatGPT ==
–ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ next() –∏ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏—Ö:

const gen = sumGenerator();
gen.next(); // –∑–∞–ø—É—Å–∫–∞–µ–º
gen.next(3); // 3
gen.next(5); // 8
gen.next(2); // 10
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 8");

const sumGenerator = function* () {
    let sum = 0;

    while (true) {
        let increment = yield sum;

        if (increment) {
            sum += increment;
        };
    }
};

const genSumGenerator = sumGenerator();
console.log(genSumGenerator.next().value); // –∑–∞–ø—É—Å–∫–∞–µ–º
console.log(genSumGenerator.next(3).value); // 3
console.log(genSumGenerator.next(5).value); // 8
console.log(genSumGenerator.next(2).value); // 10

/*
== –ó–∞–¥–∞—á–∞ 9 –æ—Ç chatGPT ==
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 9");

const reverseArray = function* (array) {
    for (let i = array.length - 1; i >= 0; i--) {
        yield array[i];
    };
};

const genReverseArray = reverseArray([1, 2, 3, 4, 5, 6, 7]);
checkGenerator(genReverseArray);

/*
== –ó–∞–¥–∞—á–∞ 1 –æ—Ç chatGPT0 ==
–°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä objectEntries(obj), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–∞—Ä—ã [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ].

const obj = { name: "Pikachu", type: "Electric" };
for (let [key, value] of objectEntries(obj)) {
    console.log(key, value);
}
*/

console.log("");
console.log("–ó–∞–¥–∞—á–∞ 10");

const objectEntries = function* (obj) {
    for (const key of Object.keys(obj)) {
        yield [key, obj[key]];
    };
};

const obj = { name: "Pikachu", type: "Electric" };

for (let [key, value] of objectEntries(obj)) {
    console.log(key, value);
};